# =================== Adjustable Parameters ===================
wavefront_zset=0.0   # Position of the time wavefront plane
helix_radiusset=1  # Radius of the helix
helix_pitchset=1   # Pitch (vertical rise per turn) of the helix
# ===============================================================
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# =================== Adjustable Parameters ===================
wavefront_z = wavefront_zset   # Position of the time wavefront plane
helix_radius = helix_radiusset  # Radius of the helix
helix_pitch = helix_pitchset   # Pitch (vertical rise per turn) of the helix
# ===============================================================

# Calculate theta_4 based on pitch and radius
theta_4_rad = np.arctan(helix_pitch / (2 * np.pi * helix_radius))
theta_4_deg = np.rad2deg(theta_4_rad)

# Create figure and 3D axis
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')

# Define the stationary origin
origin = np.array([0, 0, 0])

# Define the u^mu vector (time-flow vector)
u_mu = np.array([0, 0, 1])

# Create a helix along the z-axis
t = np.linspace(-6 * np.pi, 6 * np.pi, 1000)  # Extend above and below
x_helix = helix_radius * np.cos(t)
y_helix = helix_radius * np.sin(t)
z_helix = helix_pitch * t / (2 * np.pi)

# Translate helix to origin
helix_points = np.vstack((x_helix, y_helix, z_helix))

# Plot the helix
ax.plot3D(helix_points[0], helix_points[1], helix_points[2], color='red', label=r'$\varphi$ (Filament as Helix)')

# Plot the u^mu vector (vertical)
extend_length = 1.0
ax.quiver(*origin, *u_mu, length=extend_length, color='blue', label=r'$u^\mu$ (Time-flow)', arrow_length_ratio=0.1)
# Negative direction
ax.quiver(*origin, *-u_mu, length=extend_length, color='blue', arrow_length_ratio=0.1, linestyle='dashed')

# Plot the time wavefront as a plane (XY plane at z = wavefront_z)
xx, yy = np.meshgrid(np.linspace(-2, 2, 20), np.linspace(-2, 2, 20))
zz = np.ones_like(xx) * wavefront_z
ax.plot_surface(xx, yy, zz, alpha=0.3, color='cyan')

# Plot a dot at the intersection of the helix with the wavefront
z_cross_indices = np.where(np.diff(np.sign(helix_points[2] - wavefront_z)))[0]
if z_cross_indices.size > 0:
    idx = z_cross_indices[0]
    ax.scatter(helix_points[0, idx], helix_points[1, idx], helix_points[2, idx], color='black', s=50)

# Draw an arc to indicate theta_4 at the origin
#arc = np.linspace(0, theta_4_rad, 100)
#arc_radius = 0.5
#arc_x = arc_radius * np.sin(arc)
#arc_y = np.zeros_like(arc)
#arc_z = arc_radius * np.cos(arc)
#ax.plot(arc_x, arc_y, arc_z, color='black')

# Annotate theta_4 angle with calculated value
ax.text(0.5, 0, 0.2, fr'$\theta_4={theta_4_deg:.2f}^\circ$', fontsize=14, color='black')

# Set axis labels
ax.set_xlabel('X (Spatial)')
ax.set_ylabel('Y (Spatial)')
ax.set_zlabel('Time')

# Set limits
ax.set_xlim([-2, 2])
ax.set_ylim([-2, 2])
ax.set_zlim([-2, 2])

# Add a legend
ax.legend()

# Set title
ax.set_title(r'3D Geometric Relationship: $\theta_4$ (Helix Intersection Angle with Time Plane)')

# Show plot
plt.show()
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# =================== Adjustable Parameters ===================
wavefront_z = wavefront_zset     # Position of the time wavefront plane
helix_radius = helix_radiusset    # Radius of the helix
helix_pitch = helix_pitch     # Pitch (vertical rise per turn) of the helix
# ===============================================================

# Calculate theta_4 based on pitch and radius
theta_4_rad = np.arctan(helix_pitch / (2 * np.pi * helix_radius))
theta_4_deg = np.rad2deg(theta_4_rad)

# Create figure and 3D axis
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')

# Define the stationary origin
origin = np.array([0, 0, 0])

# Define the u^mu vector (time-flow vector)
u_mu = np.array([0, 0, 1])

# Define the tangent line vector representing the angle of intersection
tangent_vector = np.array([np.sin(theta_4_rad), 0, np.cos(theta_4_rad)])

# Extend vectors both above and below the origin
extend_length = 1.0
# Positive direction (u^mu and tangent line)
ax.quiver(*origin, *u_mu, length=extend_length, color='blue', label=r'$u^\mu$ (Time-flow)', arrow_length_ratio=0.1)
ax.quiver(*origin, *tangent_vector, length=extend_length, color='black', label=r'$\theta_4$ (Intersection Line)', arrow_length_ratio=0.1)
# Negative direction (dashed lines)
ax.quiver(*origin, *-u_mu, length=extend_length, color='blue', linestyle='dashed', arrow_length_ratio=0.1)
ax.quiver(*origin, *-tangent_vector, length=extend_length, color='black', linestyle='dashed', arrow_length_ratio=0.1)

# Plot the time wavefront as a plane (XY plane at z = wavefront_z)
xx, yy = np.meshgrid(np.linspace(-1, 1, 10), np.linspace(-1, 1, 10))
zz = np.ones_like(xx) * wavefront_z
ax.plot_surface(xx, yy, zz, alpha=0.3, color='cyan')

# Plot a dot at the intersection of the tangent line with the wavefront
t_intersect = wavefront_z / tangent_vector[2]
intersection_point = origin + t_intersect * tangent_vector
ax.scatter(*intersection_point, color='black', s=50)

# Annotate theta_4 angle with value
ax.text(0.3, 0, 0.15, fr'$\theta_4={theta_4_deg:.2f}^\circ$', fontsize=14, color='black')

# Set axis labels
ax.set_xlabel('X (Spatial)')
ax.set_ylabel('Y (Spatial)')
ax.set_zlabel('Time')

# Set limits
ax.set_xlim([-1, 1])
ax.set_ylim([-1, 1])
ax.set_zlim([-1, 1])

# Add a legend
ax.legend()

# Set title
ax.set_title(r'3D Geometric Relationship: $\theta_4$ (Intersection Angle with Time Plane)')

# Show plot
plt.show()
